# -*- coding: utf-8 -*-
"""train_notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JYsICu0uWOWSm2iq2nHDVYvD5mmuTYlg

# **Cultura e Práticas em DataOps e MLOps**
**Autor**: Renan Santos Mendes

**Email**: renansantosmendes@gmail.com

**Descrição**: Este notebook apresenta um exemplo de uma rede neural profunda com mais de uma camada para um problema de classificação.


# **Saúde Fetal**

As Cardiotocografias (CTGs) são opções simples e de baixo custo para avaliar a saúde fetal, permitindo que os profissionais de saúde atuem na prevenção da mortalidade infantil e materna. O próprio equipamento funciona enviando pulsos de ultrassom e lendo sua resposta, lançando luz sobre a frequência cardíaca fetal (FCF), movimentos fetais, contrações uterinas e muito mais.

Este conjunto de dados contém 2126 registros de características extraídas de exames de Cardiotocografias, que foram então classificados por três obstetras especialistas em 3 classes:

- Normal
- Suspeito
- Patológico

# Instalando pacotes
"""

"""# 1 - Importando os módulos necessários"""

import os
os.environ['CUDA_VISIBLE_DEVICES'] = '-1'

import random
import mlflow
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, InputLayer
from tensorflow.keras.utils import to_categorical


import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split


"""# Definindo funções adicionais"""
# Função para resetar sementes
def reset_seeds():
   os.environ['PYTHONHASHSEED']=str(42)
   tf.random.set_seed(42)
   np.random.seed(42)
   random.seed(42)

"""# 2 - Fazendo a leitura do dataset e atribuindo às respectivas variáveis"""
def read_data():
    data = pd.read_csv('https://raw.githubusercontent.com/renansantosmendes/lectures-cdas-2023/master/fetal_health_reduced.csv')
    """# 3 - Preparando o dado antes de iniciar o treino do modelo"""
    # Preparação dos dados
    X = data.drop(["fetal_health"], axis=1)
    y = data["fetal_health"]
    return X,y


def process_data(X,y):
    columns_names = list(X.columns)
    scaler = StandardScaler()
    X_df = scaler.fit_transform(X)
    X_df = pd.DataFrame(X_df, columns=columns_names)

    X_train, X_test, y_train, y_test = train_test_split(X_df, y, test_size=0.3, random_state=42)
    y_train -= 1
    y_test -= 1
    return X_train, X_test, y_train, y_test

def create_model(X):
    """# 4 - Criando o modelo e adicionando as camadas"""
    reset_seeds()
    model = Sequential() #modelo Sequencial
    #Adicionando uma camada de entrada
    model.add(InputLayer(input_shape=(X.shape[1], )))
    model.add(Dense(10, activation='relu')) #camada densa
    model.add(Dense(10, activation='relu')) #camada densa
    model.add(Dense(3, activation='softmax')) #camada de saída dos dados
    model.compile(loss='sparse_categorical_crossentropy',
                  optimizer='adam',
                  metrics=['accuracy'])
    return model

def config_mlflow():
    # Configuração do MLflow com variáveis de ambiente

    os.environ['MLFLOW_TRACKING_USERNAME'] = 'guidolabela'
    os.environ['MLFLOW_TRACKING_PASSWORD'] = 'f55e8ced06ecb9ebac177f0b994b21f41d37336e'
    mlflow.set_tracking_uri('https://dagshub.com/guidolabela/POS_IA.mlflow')

    #os.environ['MLFLOW_TRACKING_USERNAME'] = 'renansantosmendes'
    #os.environ['MLFLOW_TRACKING_PASSWORD'] = '6d730ef4a90b1caf28fbb01e5748f0874fda6077'
    #mlflow.set_tracking_uri('https://dagshub.com/renansantosmendes/mlops-ead.mlflow')
    mlflow.tensorflow.autolog(log_models=True, log_input_examples=True, log_model_signatures=True)

"""# 6 - Executando o treino do modelo"""
def train_model(model, X_train, y_train, is_train=True):
    with mlflow.start_run(run_name='experiment_gad_mlops_ead') as run:
        model.fit(X_train,
            y_train,
            epochs=50,
            validation_split=0.2,
            verbose=3)

if __name__ == "__main__":
    X,y = read_data()
    X_train, X_test, y_train, y_test = process_data(X,y)
    model = create_model(X)
    config_mlflow()
    train_model(model, X_train, y_train)
